generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  clerkId    String   @unique
  username   String   @unique
  avatarKey  String   @unique
  score      Int      @default(0)
  createdAt  DateTime @default(now())
  presses    Press[]
  roomMemberships RoomMembership[]
  sentMessages Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  sentPokes Poke[] @relation("SentPokes")
  receivedPokes Poke[] @relation("ReceivedPokes")
}

model Room {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique // Room code for users to join
  status      RoomStatus @default(WAITING) // WAITING | ACTIVE | ENDED
  createdAt   DateTime @default(now())
  competitions Competition[]
  memberships RoomMembership[]
  messages    Message[]
  pokes       Poke[]
}

model RoomMembership {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  joinedAt  DateTime @default(now())
  
  room      Room     @relation(fields: [roomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([roomId, userId])
}

model Competition {
  id         String   @id @default(cuid())
  roomId     String
  name       String
  status     CompetitionStatus @default(DRAFT)
  createdAt  DateTime @default(now())
  rounds     Round[]
  questionUsages QuestionUsage[]
  categoryGames CategoryGame[]
  room       Room     @relation(fields: [roomId], references: [id])
}

enum RoomStatus {
  WAITING
  ACTIVE
  ENDED
}

model Round {
  id             String   @id @default(cuid())
  competitionId  String
  competition    Competition @relation(fields: [competitionId], references: [id])
  startedAt      DateTime?
  endedAt        DateTime?
  buttonsEnabled Boolean   @default(false)
  winnerUserId   String?
  hasTimer       Boolean  @default(false)
  timerDuration  Int?     // Duration in seconds
  timerEndsAt    DateTime? // When the timer will end
  presses        Press[]
}

model Press {
  id        String   @id @default(cuid())
  roundId   String
  userId    String
  pressedAt DateTime @default(now())
  timerExpiresAt DateTime? // When this press's timer expires

  round     Round    @relation(fields: [roundId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([roundId, userId])
}

enum CompetitionStatus {
  DRAFT
  ACTIVE
  ENDED
}

model Question {
  id             String         @id @default(cuid())
  text           String
  type           QuestionType   @default(FREETEXT)
  imageUrl       String?        // Optional image for the question
  options        String?        // JSON string for multiple choice options
  correctAnswer  String         // For multiple choice: the correct option index/letter
  points         Int            @default(1)
  scoringType    ScoringType    @default(ALL_EQUAL)
  createdAt      DateTime       @default(now())
  answers        Answer[]
  usages         QuestionUsage[] // Track where this question has been used
}

// Tracks when a question is used in a competition
model QuestionUsage {
  id             String         @id @default(cuid())
  questionId     String
  competitionId  String
  roundId        String?
  status         QuestionStatus @default(DRAFT)
  sentAt         DateTime?      // When the question was sent to users
  completedAt    DateTime?      // When the question was completed/graded
  createdAt      DateTime       @default(now())
  
  question       Question       @relation(fields: [questionId], references: [id])
  competition    Competition    @relation(fields: [competitionId], references: [id])
  
  @@unique([questionId, competitionId])
}

model Answer {
  id         String   @id @default(cuid())
  questionId String
  competitionId String  // Track which competition this answer is for
  userId     String
  text       String
  normalized String
  isCorrect  Boolean  @default(false)
  points     Int      @default(0)
  reviewed   Boolean  @default(false)
  answeredAt DateTime @default(now())
  reviewedAt DateTime?
  
  question   Question @relation(fields: [questionId], references: [id])
  
  @@unique([questionId, competitionId, userId])
}

enum QuestionType {
  FREETEXT
  MULTIPLE_CHOICE
}

enum ScoringType {
  FIRST_ONLY      // Only first correct answer gets points
  DESCENDING      // Descending points (1st gets most, last gets least)
  ALL_EQUAL       // All correct answers get the same points
}

enum QuestionStatus {
  DRAFT           // Question created but not sent
  ACTIVE          // Question sent to users, awaiting answers
  COMPLETED       // Question graded and completed
}

// Chat messages
model Message {
  id            String   @id @default(cuid())
  roomId        String
  senderId      String
  receiverId    String?  // null means message to all (group chat)
  content       String
  createdAt     DateTime @default(now())
  read          Boolean  @default(false)
  
  room          Room     @relation(fields: [roomId], references: [id])
  sender        User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver      User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

// Pokes
model Poke {
  id            String   @id @default(cuid())
  roomId        String
  senderId      String
  receiverId    String
  createdAt     DateTime @default(now())
  seen          Boolean  @default(false)
  
  room          Room     @relation(fields: [roomId], references: [id])
  sender        User     @relation("SentPokes", fields: [senderId], references: [id])
  receiver      User     @relation("ReceivedPokes", fields: [receiverId], references: [id])
}

// Category Game
model CategoryGame {
  id              String           @id @default(cuid())
  competitionId   String
  categoryName    String           // Name of the category
  timePerPlayer   Int              // Time in seconds per player
  winnerPoints    Int              // Points for the winner
  turnOrder       String           // JSON array of userId in order
  currentTurnIndex Int             @default(0)
  currentPlayerId String?          // Who is currently active
  status          CategoryGameStatus @default(ACTIVE)
  isPaused        Boolean          @default(false)
  timerStartedAt  DateTime?        // When current turn timer started
  timerPausedAt   DateTime?        // When timer was paused (null if not paused)
  pausedTimeElapsed Int            @default(0) // Seconds elapsed when paused
  eliminatedPlayers String         @default("[]") // JSON array of eliminated userIds
  winnerId        String?          // Winner's userId
  createdAt       DateTime         @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  
  competition     Competition      @relation(fields: [competitionId], references: [id])
}

enum CategoryGameStatus {
  ACTIVE
  PAUSED
  COMPLETED
}
